# =============================================================================
# CONSUMER KAFKA POUR DJANGO
# √âcoute les messages Kafka et les traite comme des donn√©es CSV
# =============================================================================

import json        # Pour d√©coder les messages JSON
import logging     # Pour les logs
from kafka import KafkaConsumer    # Client Kafka Python
from pymongo import MongoClient    # Client MongoDB
import datetime    # Pour les timestamps
from django.conf import settings  # Configuration Django

# Configuration des logs
logger = logging.getLogger(__name__)

class OdooCustomerDataConsumer:
    """
    Classe qui √©coute le topic 'odoo-customer-data' et traite les messages
    comme s'ils venaient d'un fichier CSV upload√©
    """
    
    def __init__(self):
        """Initialise le consumer Kafka et la connexion MongoDB"""
        
        # === CONFIGURATION KAFKA CONSUMER ===
        self.consumer = KafkaConsumer(
            'odoo-customer-data',                    # Topic √† √©couter
            bootstrap_servers=['kafka-broker:29092'], # Adresse du broker Kafka
            group_id='django-governance-group',      # ID du groupe de consumers
            # Fonction pour d√©coder les messages JSON
            value_deserializer=lambda x: json.loads(x.decode('utf-8')),
            auto_offset_reset='latest'               # Commence par les nouveaux messages
        )
          
        # === CONFIGURATION MONGODB ===
        # Connexion √† MongoDB (m√™me config que ton app Django)
        self.client = MongoClient('mongodb://mongodb:27017/')
        self.main_db = self.client['main_db']           # Base principale
        self.csv_db = self.client['csv_anonymizer_db']  # Base pour les CSV
          
    def start_consuming(self):
        """D√©marre l'√©coute des messages Kafka en boucle infinie"""
        logger.info("üöÄ D√©marrage du consumer Kafka pour odoo-customer-data")
          
        # Boucle infinie d'√©coute
        for message in self.consumer:
            try:
                customer_data = message.value  # Donn√©es du client depuis Kafka
                self.process_customer_data(customer_data)
            except Exception as e:
                logger.error(f"Erreur traitement message Kafka: {e}")
      
    def process_customer_data(self, customer_data):
        """
        Traite les donn√©es client re√ßues d'Odoo comme un CSV import√©
        Simule le processus d'upload CSV de ton app Django
        """
          
        # === CR√âATION D'UN JOB D'ANONYMISATION ===
        # Simule la structure d'un job CSV comme dans UploadCSVView
        job_data = {
            'user_email': 'system@kafka.consumer',  # Utilisateur syst√®me
            # Nom de fichier g√©n√©r√© automatiquement
            'original_filename': f"odoo_customers_{datetime.datetime.now().strftime('%Y%m%d_%H%M%S')}.csv",
            'upload_date': datetime.datetime.now(),
            'status': 'pending',                     # En attente de traitement
            'source': 'kafka_odoo_vrp',            # Source : Kafka depuis Odoo VRP
            'shared_with_data_stewards': True,      # Partag√© avec les data stewards
        }
          
        # === INSERTION DU JOB EN BASE ===
        # Ins√®re le job comme dans UploadCSVView.post()
        result = self.main_db.anonymization_jobs.insert_one(job_data)
        job_id = result.inserted_id
          
        # === CONVERSION DES DONN√âES ODOO EN FORMAT CSV ===
        headers = ['name', 'email', 'phone', 'location', 'customer_id']
        csv_data = [{
            'name': customer_data.get('name', ''),          # Nom du client
            'email': customer_data.get('email', ''),        # Email du client
            'phone': customer_data.get('phone', ''),        # T√©l√©phone du client
            'location': customer_data.get('location', ''),  # Localisation du client
            'customer_id': customer_data.get('id', '')      # ID du client dans Odoo
        }]
          
        # === STOCKAGE DES DONN√âES CSV ===
        # Stocke comme dans UploadCSVView
        self.csv_db.csv_data.insert_one({
            'job_id': str(job_id),  # R√©f√©rence vers le job
            'headers': headers,      # En-t√™tes du CSV
            'data': csv_data        # Donn√©es du CSV
        })
          
        logger.info(f"‚úÖ Client Odoo trait√©: {customer_data.get('name')} - Job ID: {job_id}")